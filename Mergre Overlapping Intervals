/*

Given a collection of intervals, merge all overlapping intervals.
For example,
Given [2,4],[10,18],[3,5],[8,12],[1,3],[25,30]
return [1,5],[8,18],[25,30].

*/


import java.io.*;
import java.util.*;


class intrv{
  int key=Integer.MIN_VALUE,val= Integer.MIN_VALUE;
  intrv(int key,int val){
    this.key = key;
    this.val = val;
  }
}


class MyCode{

  static HashMap<Integer,Integer> merged(List<intrv> list){    
    HashMap<Integer,Integer> res= new HashMap<>();
 
    intrv prev= list.get(0);
    for(int i=1;i<list.size();i++){
            intrv cur = list.get(i);
            
            //previous end time is less than current start time else max of previous and current end time
            if(prev.val < cur.key){
              res.put(prev.key,prev.val);
              prev = cur;
            }else{
              intrv merged = new intrv(prev.key,Math.max(prev.val,cur.val));
              prev = merged;
            }
    }
    res.put(prev.key,prev.val);
    return res;
  }
  
  public static void main(String[] args){
    
    int[][] intr = {{1,3},{1,4},{2,5},{3,6},{15,18},{8,16}};
    
    List<intrv> list= new ArrayList<>();
    
    for(int i=0;i<intr.length;i++){
      list.add(new intrv(intr[i][0],intr[i][1]));
    }
    
    //Sorted interval accroding to start time(Key values)
    list.sort((x,y)-> x.key - y.key);
    
    Map<Integer,Integer>res = merged(list);
    System.out.println("Number of Output Interval : "+ res.size());
    
    for(Map.Entry<Integer, Integer> entry : res.entrySet()){
        System.out.println(entry.getKey()+" "+ entry.getValue());
    }
  }
}
